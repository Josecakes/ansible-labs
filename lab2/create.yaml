---

# Step 1 - Create a collection of EC2 instances and boot
# them.  No configuration beyond a simple boot will be done.

- name: "Create host instances"
  hosts: localhost
  gather_facts: false
  vars:
    aws_profile: "{{ lookup('env', 'AWS_PROFILE') }}"
    siduser: "{{ lookup('env', 'MYSIDLABS_USER') }}"

  roles:
    # Set AWS environment specific variables.
    - "{{ aws_profile }}_init"
    # Quick check to make sure the runtime env looks reasonable.
    - env_check

  tasks:

    - name: Provision and launch instances
      ec2:
        assign_public_ip: true
        group: "{{ security_group }}"
        image: "{{ item.ami }}"
        instance_tags:
          Name: "{{ siduser }}-{{ item.tier }}-{{ idx }}"
          mysidlabs: "1"
          mysidlabs_owner: "{{ siduser }}"
          mysidlabs_tier: "{{ item.tier }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ aws_ssh_key_pair }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ vpc_subnet }}"
        wait: true
      loop:
        - { tier: "lb",  ami: "ami-0fc20dd1da406780b" } # Ubuntu
        - { tier: "web", ami: "ami-0e38b48473ea57778" } # ALX
        - { tier: "web", ami: "ami-0e38b48473ea57778" } # ALX
      loop_control:
        index_var: idx
      register: ec2

    # Note that we're not doing anything with an inventory here.
    # In Lab1, we had the playbook also create the static 
    # inventory.  In this lab, we'll be using a dynamic inventory.

    - debug:
        msg: "{{ item.instances[0].tags.Name }} == {{ item.instances[0].private_ip }}, {{ item.instances[0].public_ip }}"
      loop: "{{ ec2.results }}"
      loop_control:
        label: ""
...

