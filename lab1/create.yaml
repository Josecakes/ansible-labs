---

# Step 1 - Create a single EC2 instance and boot it.
# No configuration beyond a simple boot will be done.

- name: "Create host instance"
  hosts: localhost
  gather_facts: false
  vars:
    aws_profile: "{{ lookup('env', 'AWS_PROFILE') | default('mysidlabs', true) }}"
    siduser: "{{ lookup('env', 'MYSIDLABS_USER') | default('siduser299', true) }}"

  roles:
    # Set AWS environment specific variables.
    - "{{ aws_profile }}_init"
    # Quick check to make sure the runtime env looks reasonable.
    - env_check

  tasks:

    - name: "Provision and launch instances"
      ec2:
        assign_public_ip: true
        group: "{{ security_group }}"
        image: "ami-0e38b48473ea57778"
        instance_tags:
          Name: "{{ siduser }}-lab1"
          mysidlabs: "1"
          mysidlabs_owner: "{{ siduser }}"
          mysidlabs_tier: "lab1"
        instance_type: "{{ instance_type }}"
        key_name: "{{ aws_ssh_key_pair }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ vpc_subnet }}"
        wait: true
      register: ec2

    # Create an Ansible inventory file that contains
    # the public DNS name of the instance just created.
    - name: "Remove old host inventory file"
      file:
        path: "hosts"
        state: absent
    - name: "Create hosts inventory file"
      lineinfile:
        create: true
        path: "inv.txt"
        line: "{{ ec2.instances[0].public_dns_name }}"

    - debug:
        msg: "{{ ec2.instances[0].tags.Name }} == Private IP: {{ ec2.instances[0].private_ip }}, Public IP: {{ ec2.instances[0].public_ip }}"
      
...
